{"name":"Patty","tagline":"A pattern matching library for Nim","body":"Patty - A pattern matching library\r\n==================================\r\n\r\n[![Build Status](https://travis-ci.org/andreaferretti/patty.svg?branch=master)](https://travis-ci.org/andreaferretti/patty)\r\n[![nimble](https://raw.githubusercontent.com/yglukhov/nimble-tag/master/nimble_js.png)](https://github.com/yglukhov/nimble-tag)\r\n\r\nPatty is a library to perform pattern matching in Nim. The patterns have to be [variant objects](http://nim-lang.org/docs/manual.html#types-object-variants), which in Nim are encoded with a field (usually called `kind`) which varies in an enum, and a different object layout based on the value of this tag. An example would be\r\n\r\n```nim\r\ntype\r\n  ShapeKind = enum\r\n    Circle, Rectangle\r\n  Shape = object\r\n    case kind: ShapeKind\r\n    of Circle:\r\n      r: float\r\n    of Rectangle:\r\n      w, h: float\r\n```\r\n\r\nIf you have such an algebraic data type, you can do the following with Patty:\r\n\r\n```nim\r\nimport patty\r\n\r\nproc makeRect(w, h: float): Shape = Shape(kind: Rectangle, w: w, h: h)\r\n\r\nmatch makeRect(3, 4):\r\n  Circle(r: radius):\r\n    echo \"it is a circle of radius \", radius\r\n  Rectangle(w: width, h: height):\r\n    echo \"it is a rectangle of height \", height\r\n```\r\n\r\nThis will be translated by the `match` macro into the following form\r\n\r\n```nim\r\nlet :tmp = makeRect(3, 4)\r\ncase :tmp.kind\r\nof Circle:\r\n  let radius = :tmp.r\r\n  echo \"it is a circle of radius \", radius\r\nof Rectangle:\r\n  let\r\n    width = :tmp.w\r\n    height = :tmp.h\r\n  echo \"it is a rectangle of height \", height\r\n```\r\n\r\nMatching by position is also valid, like this:\r\n\r\n```nim\r\nmatch makeRect(3, 4):\r\n  Circle(radius):\r\n    echo \"it is a circle of radius \", radius\r\n  Rectangle(width, height):\r\n    echo \"it is a rectangle of height \", height\r\n```\r\n\r\nOne can also use `_` for a variable, in which case it will not be bound. That is, the following\r\n\r\n```nim\r\nimport patty\r\n\r\nproc makeRect(w, h: float): Shape = Shape(kind: Rectangle, w: w, h: h)\r\n\r\nmatch makeRect(3, 4):\r\n  Circle(r: radius):\r\n    echo \"it is a circle of radius \", radius\r\n  Rectangle(w: _, h: height):\r\n    echo \"it is a rectangle of height \", height\r\n```\r\n\r\nbecomes\r\n\r\n```nim\r\nlet :tmp = makeRect(3, 4)\r\ncase :tmp.kind\r\nof Circle:\r\n  let radius = :tmp.r\r\n  echo \"it is a circle of radius \", radius\r\nof Rectangle:\r\n  let height = :tmp.h\r\n  echo \"it is a rectangle of height \", height\r\n```\r\n\r\nNotice that in the examples, the field you dispatch on is called `kind`, but any other name would do. Also, checks are exhaustive: if you miss a case, the compiler will complain.\r\n\r\nOne can instead pattern-match on non-variant objects, which essentially amounts to deconstructing fields:\r\n\r\n```nim\r\ntype Person = object\r\n  name: string\r\n  age: int\r\nlet p = Person(name: \"John Doe\", age: 37)\r\nmatch p:\r\n  Person(name: n, age: a):\r\n    echo n, \"is \", a, \" years old\"\r\n```\r\n\r\nAgain, this is the same as\r\n\r\n```nim\r\nmatch p:\r\n  Person(n, a):\r\n    echo n, \"is \", a, \" years old\"\r\n```\r\n\r\nConstructing variant objects\r\n----------------------------\r\n\r\nPatty also provides another macro to create algebraic data types. It looks like\r\n\r\n```nim\r\nvariant Shape:\r\n  Circle(r: float)\r\n  Rectangle(w: float, h: float)\r\n  UnitCircle\r\n```\r\n\r\nand expands to\r\n\r\n```nim\r\ntype\r\n  ShapeKind {.pure.} = enum\r\n    Circle, Rectangle, UnitCircle\r\n  Shape = object\r\n    case kind: ShapeKind\r\n    of ShapeKind.Circle:\r\n      r: float\r\n    of ShapeKind.Rectangle:\r\n      w: float\r\n      h: float\r\n    of ShapeKind.UnitCircle:\r\n      nil\r\n\r\nproc `==`(a: Shape; b: Shape): bool =\r\n  if a.kind == b.kind:\r\n    case a.kind\r\n    of ShapeKind.Circle:\r\n      return a.r == b.r\r\n    of ShapeKind.Rectangle:\r\n      return a.w == b.w and a.h == b.h\r\n    of ShapeKind.UnitCircle:\r\n      return true\r\n  else:\r\n    return false\r\n\r\nproc Circle(r: float; x: float; y: float): Shape =\r\n  Shape(kind: ShapeKind.Circle, r: r)\r\n\r\nproc Rectangle(w: float; h: float): Shape =\r\n  Shape(kind: ShapeKind.Rectangle, w: w, h: h)\r\n\r\nproc UnitCircle(side: int): Shape =\r\n  Shape(kind: ShapeKind.UnitCircle)\r\n```\r\n\r\nNotice that the macro also generates three convenient constructors (`Circle` ,`Rectangle` and `UnitCircle`), and in fact the enum is pure to avoid a name conflict. Also, a proper definition of equality based on the actual contents of the record is generated.\r\n\r\n**By default the generated ADT is private to the module**. If you want to generate a public ADT use the `variantp` macro, which has the same syntax as `variant` but makes the types, fields, equality definition and generated constructors public.\r\n\r\nA couple of limitations fo the `variant` macro:\r\n\r\n* field names must be unique across branches (that is, different variants cannot have two fields with the same name). This is actually a limitation of Nim.\r\n* the shortcut that groups field names by type does not seem to work, that is, in the above example one could not write `Rectangle(w, h: float)`.\r\n\r\nIn the future, Patty may also add copy constructors. Also, some work needs to be done to make it easier to use the generated contructors with `ref` types, in particular for the important case of recursive algebraic data types.\r\n\r\nThings that do not work (yet)\r\n-----------------------------\r\n\r\nOne would expect many forms of pattern matching but, at least for now, the support in Patty is very limited. Things that would be nice to support but do not work yet include:\r\n\r\n* matching a constant\r\n\r\n```nim\r\nmatch c:\r\n  \"hello\":\r\n    echo \"the string was hello\"\r\n```\r\n\r\n* matching an existing variable\r\n\r\n```nim\r\nlet x = 5\r\nmatch c:\r\n  x:\r\n    echo \"c == 5\"\r\n```\r\n\r\n* nested pattern matching\r\n\r\n```nim\r\nmatch c:\r\n  Circle(Point(x: x, y: y), r: r):\r\n    echo \"the abscissa of the center is \", x\r\n```\r\n\r\n* matching without binding\r\n\r\n```nim\r\nmatch c:\r\n  Circle:\r\n    echo \"it is a circle!\"\r\n```\r\n\r\n* binding subpatterns\r\n\r\n```nim\r\nmatch getMeACircle():\r\n  c@Circle(x, y, r):\r\n    echo \"there you have \", c\r\n```\r\n\r\n* pattern matching as an expression\r\n\r\n```nim\r\nlet coord = match c:\r\n  Circle(x: x, y: y, r: r):\r\n    x\r\n  Rectangle(w: w, h: h):\r\n    h\r\n```\r\n\r\n* unification\r\n\r\n```nim\r\nmatch r:\r\n  Rectangle(w: x, h: x):\r\n    echo \"it is a square\"\r\n```\r\n\r\n* guards\r\n\r\n```nim\r\nmatch c:\r\n  Circle(x: x, y: y, r: r) if r < 0:\r\n    echo \"the circle has negative length\"\r\n```\r\n\r\n* variable-length pattern matching, such as with arrays\r\n\r\n```nim\r\nmatch c:\r\n  [a, b, c]:\r\n    echo \"the length is 3 and the first elements is \", a\r\n```\r\n\r\n* custom pattern matchers, such as in regexes\r\n\r\n```nim\r\nlet Email = r\"(\\w+)@(\\w+).(\\w+)\"\r\nmatch c:\r\n  Email(name, domain, tld):\r\n    echo \"hello \", name\r\n```\r\n\r\n* combining patterns with `or`\r\n\r\n```nim\r\nmatch c:\r\n  Circle or Rectangle:\r\n    echo \"it is a shape\"\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}